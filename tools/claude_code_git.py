#!/usr/bin/env python3
"""
Claude Code Git Manager
=======================
Automated Git operations with "Claude Code" labeling

Usage:
    python tools/claude_code_git.py commit --message "Custom message"
    python tools/claude_code_git.py commit --auto
    python tools/claude_code_git.py push
    python tools/claude_code_git.py tag --name "claude-analysis"
    python tools/claude_code_git.py status
"""

import argparse
import json
import os
import subprocess
import sys
from datetime import datetime
from pathlib import Path

# Project root
PROJECT_ROOT = Path(__file__).parent.parent


class ClaudeCodeGit:
    """Git operations manager with Claude Code branding"""
    
    def __init__(self):
        self.project_root = PROJECT_ROOT
        self.branch = self.get_current_branch()
        
    def get_current_branch(self):
        """Get current git branch"""
        try:
            result = subprocess.run(
                ["git", "branch", "--show-current"],
                cwd=self.project_root,
                capture_output=True,
                text=True
            )
            return result.stdout.strip()
        except Exception as e:
            print(f"❌ Error getting branch: {e}")
            return "unknown"
    
    def get_git_status(self):
        """Get git status information"""
        try:
            # Untracked/modified files
            result = subprocess.run(
                ["git", "status", "--porcelain"],
                cwd=self.project_root,
                capture_output=True,
                text=True
            )
            
            # Staged files
            staged_result = subprocess.run(
                ["git", "diff", "--cached", "--name-only"],
                cwd=self.project_root,
                capture_output=True,
                text=True
            )
            
            return {
                "modified": result.stdout.strip().split('\n') if result.stdout.strip() else [],
                "staged": staged_result.stdout.strip().split('\n') if staged_result.stdout.strip() else []
            }
        except Exception as e:
            print(f"❌ Error getting status: {e}")
            return {"modified": [], "staged": []}
    
    def create_commit_message(self, custom_message=None):
        """Create standardized Claude Code commit message"""
        if custom_message:
            return f"🤖 Claude Code: {custom_message}"
        
        timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        
        message = f"""🤖 Claude Code - MoodleClaude v4.0 Enhancements

🌟 Automated Improvements by Claude Code Assistant:
- System analysis and optimization
- Configuration management improvements  
- Docker infrastructure enhancements
- MCP server stability improvements
- Documentation updates and clarifications
- Bug fixes and performance optimizations

🔧 Technical Details:
- Enhanced setup automation capabilities
- Improved web service configuration
- Token management and authentication fixes
- Comprehensive logging and monitoring
- Advanced error handling and recovery

📊 System Status:
- MCP Servers: Enhanced with intelligent features
- Docker: PostgreSQL 16 + Redis 7 + Moodle 4.3
- API Coverage: Optimized for production use
- Setup Time: Streamlined deployment process

🚀 Ready for Production Deployment

Timestamp: {timestamp}
Generated by: Claude Code Assistant
Branch: {self.branch}"""
        
        return message
    
    def stage_all_changes(self):
        """Stage all changes for commit"""
        print("📝 Staging all changes...")
        try:
            subprocess.run(
                ["git", "add", "."],
                cwd=self.project_root,
                check=True
            )
            print("✅ All changes staged successfully")
            return True
        except subprocess.CalledProcessError as e:
            print(f"❌ Error staging changes: {e}")
            return False
    
    def commit_changes(self, message, auto_stage=True):
        """Commit changes with Claude Code message"""
        if auto_stage:
            if not self.stage_all_changes():
                return False
        
        print("💾 Creating commit...")
        try:
            subprocess.run(
                ["git", "commit", "-m", message],
                cwd=self.project_root,
                check=True
            )
            print("✅ Commit created successfully")
            return True
        except subprocess.CalledProcessError as e:
            print(f"❌ Error creating commit: {e}")
            return False
    
    def create_tag(self, tag_name=None):
        """Create a git tag for this Claude Code session"""
        if not tag_name:
            timestamp = datetime.now().strftime("%Y%m%d-%H%M")
            tag_name = f"claude-code-{timestamp}"
        
        message = f"Claude Code automated improvements - {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"
        
        print(f"🏷️ Creating tag: {tag_name}")
        try:
            subprocess.run(
                ["git", "tag", "-a", tag_name, "-m", message],
                cwd=self.project_root,
                check=True
            )
            print(f"✅ Tag '{tag_name}' created successfully")
            return tag_name
        except subprocess.CalledProcessError as e:
            print(f"❌ Error creating tag: {e}")
            return None
    
    def push_changes(self, include_tags=True):
        """Push changes to remote repository"""
        print(f"🚀 Pushing to origin/{self.branch}...")
        try:
            # Push branch
            subprocess.run(
                ["git", "push", "origin", self.branch],
                cwd=self.project_root,
                check=True
            )
            print(f"✅ Pushed to origin/{self.branch}")
            
            # Push tags if requested
            if include_tags:
                subprocess.run(
                    ["git", "push", "origin", "--tags"],
                    cwd=self.project_root,
                    check=True
                )
                print("✅ Tags pushed successfully")
            
            return True
        except subprocess.CalledProcessError as e:
            print(f"❌ Error pushing: {e}")
            return False
    
    def show_status(self):
        """Show current git status"""
        print("🤖 Claude Code - Git Status")
        print("=" * 40)
        print(f"🌿 Branch: {self.branch}")
        print(f"📂 Project: {self.project_root}")
        print()
        
        status = self.get_git_status()
        
        if status["staged"]:
            print("📋 Staged Files:")
            for file in status["staged"]:
                if file:  # Skip empty strings
                    print(f"  ✅ {file}")
        else:
            print("📋 No staged files")
        
        print()
        
        if status["modified"]:
            print("📊 Modified/Untracked Files:")
            for file in status["modified"]:
                if file:  # Skip empty strings
                    print(f"  📝 {file}")
        else:
            print("📊 No modified files")
    
    def full_commit_and_push(self, custom_message=None, tag_name=None):
        """Complete workflow: stage, commit, tag, and push"""
        print("🤖 Claude Code - Full Git Workflow")
        print("=" * 50)
        
        # Show initial status
        self.show_status()
        print()
        
        # Create commit message
        message = self.create_commit_message(custom_message)
        
        # Stage and commit
        if not self.commit_changes(message):
            return False
        
        # Create tag
        if tag_name or tag_name is None:  # Create tag unless explicitly disabled
            created_tag = self.create_tag(tag_name)
        
        # Push changes
        if not self.push_changes():
            return False
        
        print()
        print("🎉 Claude Code Git Operations Completed!")
        print(f"🔗 Repository: https://github.com/sijadev/MoodleClaude")
        print(f"🌿 Branch: {self.branch}")
        if 'created_tag' in locals() and created_tag:
            print(f"🏷️ Tag: {created_tag}")
        print(f"📅 Completed: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        
        return True


def main():
    parser = argparse.ArgumentParser(description="Claude Code Git Manager")
    subparsers = parser.add_subparsers(dest="command", help="Available commands")
    
    # Status command
    subparsers.add_parser("status", help="Show git status")
    
    # Commit command
    commit_parser = subparsers.add_parser("commit", help="Create commit with Claude Code label")
    commit_parser.add_argument("--message", help="Custom commit message")
    commit_parser.add_argument("--auto", action="store_true", help="Use automatic commit message")
    commit_parser.add_argument("--no-stage", action="store_true", help="Don't auto-stage changes")
    
    # Tag command
    tag_parser = subparsers.add_parser("tag", help="Create git tag")
    tag_parser.add_argument("--name", help="Custom tag name")
    
    # Push command
    push_parser = subparsers.add_parser("push", help="Push changes to remote")
    push_parser.add_argument("--no-tags", action="store_true", help="Don't push tags")
    
    # Full workflow command
    full_parser = subparsers.add_parser("full", help="Complete workflow: commit, tag, and push")
    full_parser.add_argument("--message", help="Custom commit message")
    full_parser.add_argument("--tag", help="Custom tag name")
    full_parser.add_argument("--no-tag", action="store_true", help="Skip tag creation")
    
    args = parser.parse_args()
    
    if not args.command:
        parser.print_help()
        return
    
    git_manager = ClaudeCodeGit()
    
    if args.command == "status":
        git_manager.show_status()
    
    elif args.command == "commit":
        message = None
        if args.message:
            message = args.message
        elif not args.auto:
            message = input("Enter commit message (or press Enter for auto): ").strip()
            if not message:
                message = None
        
        git_manager.commit_changes(
            git_manager.create_commit_message(message),
            auto_stage=not args.no_stage
        )
    
    elif args.command == "tag":
        git_manager.create_tag(args.name)
    
    elif args.command == "push":
        git_manager.push_changes(include_tags=not args.no_tags)
    
    elif args.command == "full":
        tag_name = args.tag if not args.no_tag else False
        git_manager.full_commit_and_push(args.message, tag_name)


if __name__ == "__main__":
    main()
