name: E2E Tests - MoodleClaude
on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:  # Manual trigger

env:
  DOCKER_BUILDKIT: 1
  COMPOSE_DOCKER_CLI_BUILD: 1

jobs:
  e2e-tests:
    runs-on: ubuntu-latest
    timeout-minutes: 45
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-
            
      - name: Create necessary directories
        run: |
          mkdir -p test-results
          mkdir -p logs
          
      - name: Start test environment
        run: |
          cd deployment/docker
          docker-compose -f docker-compose.test.yml up -d postgres_test
          
      - name: Wait for PostgreSQL to be ready
        run: |
          cd deployment/docker
          echo "Waiting for PostgreSQL..."
          timeout 120s bash -c 'until docker-compose -f docker-compose.test.yml exec -T postgres_test pg_isready -U moodleuser -d moodletest; do sleep 2; done'
          
      - name: Start Moodle application
        run: |
          cd deployment/docker
          docker-compose -f docker-compose.test.yml up -d moodle_test
          
      - name: Wait for Moodle to be ready
        run: |
          cd deployment/docker
          echo "Waiting for Moodle to be ready..."
          timeout 300s bash -c 'until curl -f http://localhost:8081/login/index.php >/dev/null 2>&1; do 
            echo "Waiting for Moodle..."; 
            sleep 10; 
          done'
          echo "Moodle is ready!"
          
      - name: Verify Moodle installation
        run: |
          echo "Testing Moodle accessibility..."
          curl -I http://localhost:8081/
          curl -s http://localhost:8081/ | grep -i "moodle\|login" || echo "Moodle content check"
          
      - name: Build and run E2E tests
        run: |
          cd deployment/docker
          docker-compose -f docker-compose.test.yml build test_runner
          docker-compose -f docker-compose.test.yml run --rm test_runner
          
      - name: Collect test results
        if: always()
        run: |
          # Copy test results from Docker volumes
          docker run --rm \
            -v moodleclaude_test_results:/source \
            -v ${{ github.workspace }}/test-results:/destination \
            alpine cp -r /source/. /destination/ 2>/dev/null || echo "No test results to copy"
            
          # Copy logs
          docker run --rm \
            -v moodleclaude_test_logs:/source \
            -v ${{ github.workspace }}/logs:/destination \
            alpine cp -r /source/. /destination/ 2>/dev/null || echo "No logs to copy"
            
      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: test-results-${{ github.run_number }}
          path: |
            test-results/
            logs/
          retention-days: 30
          
      - name: Upload test reports
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: test-reports-${{ github.run_number }}
          path: |
            test-results/**/*.xml
            test-results/**/*.json
            test-results/**/*.html
          retention-days: 7
          
      - name: Display test summary
        if: always()
        run: |
          echo "=== Test Execution Summary ==="
          if [ -d "test-results" ] && [ "$(ls -A test-results)" ]; then
            echo "‚úÖ Test results collected"
            find test-results -name "*.xml" -o -name "*.json" | head -10
          else
            echo "‚ùå No test results found"
          fi
          
          if [ -d "logs" ] && [ "$(ls -A logs)" ]; then
            echo "üìã Logs collected"
            find logs -name "*.log" | head -5
          else
            echo "üìã No logs found"
          fi
          
      - name: Cleanup
        if: always()
        run: |
          cd deployment/docker
          docker-compose -f docker-compose.test.yml down -v
          docker system prune -f
          
  # Optional: Parallel test jobs for different test suites
  unit-tests:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov
          
      - name: Run unit tests
        run: |
          pytest tests/unit/ --cov=src/ --cov-report=xml --cov-report=html
          
      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          fail_ci_if_error: false